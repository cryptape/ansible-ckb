data_dir = {{ ckb.data_dir }}

[chain]
# Choose the kind of chains to run, possible values:
# - { file = "specs/dev.toml" }
# - { bundled = "specs/testnet.toml" }
# - { bundled = "specs/mainnet.toml" }
spec = {{ ckb.chain.spec.bundled | { file = "specs/dev.toml"}  }}

[logger]
filter = {{ ckb.logger.filter }}
color = {{ ckb.logger.color }}
log_to_file = {{ ckb.logger.log_to_file }}
log_to_stdout = {{ ckb.logger.log_to_stdout }}

[sentry]
# set to blank to disable sentry error collection
dsn = {{ ckb.sentry.dsn }}
# if you are willing to help us to improve,
# please leave a way to contact you when we have troubles to reproduce the errors.
org_contact = {{ ckb.sentry.org_contact }}

# [memory_tracker]
# # Seconds between checking the process, 0 is disable, default is 0.
# interval = 600

[db]
# The capacity of RocksDB cache, which caches uncompressed data blocks, indexes and filters, default is 128MB.
# Rocksdb will automatically create and use an 8MB internal cache if you set this value to 0.
# To turning off cache, you need to set this value to 0 and set `no_block_cache = true` in the options_file,
# however, we strongly discourage this setting, it may lead to severe performance degradation.
cache_size = {{ ckb.db.cache_size }}

# Provide an options file to tune RocksDB for your workload and your system configuration.
# More details can be found in [the official tuning guide](https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide).
options_file = {{ ckb.db.options_file }}

[network]
listen_addresses = {{ ckb.network.listen_addresses }}
### Specify the public and routable network addresses
# public_addresses = []

# Node connects to nodes listed here to discovery other peers when there's no local stored peers.
# When chain.spec is changed, this usually should also be changed to the bootnodes in the new chain.
bootnodes = {{ ckb.network.bootnodes }}

### Whitelist-only mode
whitelist_only = {{ ckb.network.whitelist_only }}
### Whitelist peers connecting from the given IP addresses
whitelist_peers = {{ ckb.network.whitelist_peers }}

max_peers = {{ ckb.network.max_peers }}
max_outbound_peers = {{ ckb.network.max_outbound_peers }}
# 2 minutes
ping_interval_secs = {{ ckb.network.ping_interval_secs }}
# 20 minutes
ping_timeout_secs = {{ ckb.network.ping_timeout_secs }}
connect_outbound_interval_secs = {{ ckb.network.connect_outbound_interval_secs }}
# If set to true, try to register upnp
upnp = {{ ckb.network.upnp }}
# If set to true, network service will add discovered local address to peer store, it's helpful for private net development
discovery_local_address = {{ ckb.network.discovery_local_address }}
# If set to true, random cleanup when there are too many inbound nodes
# Ensure that itself can continue to serve as a bootnode node
bootnode_mode = {{ ckb.network.bootnode_mode }}

[rpc]
# By default RPC only binds to localhost, thus it only allows accessing from the same machine.
#
# Allowing arbitrary machines to access the JSON-RPC port is dangerous and strongly discouraged.
# Please strictly limit the access to only trusted machines.
listen_address = {{ ckb.rpc.listen_address }}

# Default is 10MiB = 10 * 1024 * 1024
max_request_body_size = {{ ckb.rpc.max_request_body_size }}

# List of API modules: ["Net", "Pool", "Miner", "Chain", "Stats", "Subscription", "Experiment", "Debug"]
modules = {{ ckb.rpc.modules }}

# By default RPC only binds to HTTP service, you can bind it to TCP and WebSocket.
# tcp_listen_address = "127.0.0.1:18114"
# ws_listen_address = "127.0.0.1:28114"
reject_ill_transactions = {{ ckb.rpc.reject_ill_transactions }}

# By default deprecated rpc methods are disabled.
enable_deprecated_rpc = {{ ckb.rpc.enable_deprecated_rpc }}

[tx_pool]
max_mem_size = {{ ckb.tx_pool.max_mem_size }}
max_cycles = {{ ckb.tx_pool.max_cycles }}
max_verify_cache_size = {{ ckb.tx_pool.max_verify_cache_size }}
max_conflict_cache_size = {{ ckb.tx_pool.max_conflict_cache_size }}
max_committed_txs_hash_cache_size = {{ ckb.tx_pool.max_committed_txs_hash_cache_size }}
min_fee_rate = {{ ckb.tx_pool.min_fee_rate }}
max_tx_verify_cycles = {{ ckb.tx_pool.max_tx_verify_cycles }}
max_ancestors_count = {{ ckb.tx_pool.max_ancestors_count }}

[store]
header_cache_size          = {{ ckb.store.header_cache_size          }}
cell_data_cache_size       = {{ ckb.store.cell_data_cache_size       }}
block_proposals_cache_size = {{ ckb.store.block_proposals_cache_size }}
block_tx_hashes_cache_size = {{ ckb.store.block_tx_hashes_cache_size }}
block_uncles_cache_size    = {{ ckb.store.block_uncles_cache_size    }}
cellbase_cache_size        = {{ ckb.store.cellbase_cache_size        }}

# [notifier]
# # Execute command when the new tip block changes, first arg is block hash.
# new_block_notify_script = "your_new_block_notify_script.sh"
# # Execute command when node received an network alert, first arg is alert message string.
# network_alert_notify_script = "your_network_alert_notify_script.sh"

# Set the lock script to protect mined CKB.
#
# CKB uses CS architecture for miner. Miner process (ckb miner) gets block
# template from the Node process (ckb run) via RPC. Thus the lock script is
# configured in ckb.toml instead of ckb-miner.toml, and the config takes effect
# after restarting Node process.
#
# The `code_hash` identifies different cryptography algorithm. Read the manual
# of the lock script provider about how to generate this config.
#
# CKB provides an secp256k1 implementation, it requires a hash on the
# compressed public key. The hash algorithm is blake2b, with personal
# "ckb-default-hash". The first 160 bits (20 bytes) are used as the only arg.
#
# You can use any tool you trust to generate a Bitcoin private key and public
# key pair, which can be used in CKB as well. CKB CLI provides the function for
# you to convert the public key into block assembler configuration parameters.
#
# Here is an example using ckb-cli to generate an account, this command will
# print the block assembler args(lock_arg) to screen:
#
#     ckb-cli account new
#
# If you already have a raw secp256k1 private key, you can get the lock_arg by:
#
#     ckb-cli util key-info --privkey-path <privkey-path>
#
# The command `ckb init` also accepts options to generate the block assembler
# directly. See `ckb init --help` for details.
#
#     ckb init <lock_arg>
#
# secp256k1_blake160_sighash_all example:
[block_assembler]
code_hash = {{ ckb.block_assembler.code_hash }}
args = {{ ckb.block_assembler.args }}
hash_type = {{ ckb.block_assembler.hash_type }}
message = {{ ckb.block_assembler.message }}
